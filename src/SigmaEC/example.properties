####################
# The experiment is the top-level controller for everything that happens.
####################
experiment = SigmaEC.experiment.SimpleExperiment
experiment.numRuns = 1
# Optionally fix the random seed
experiment.random = SigmaEC.SRandom
experiment.random.seed = 10000

####################
# Set up the initial population and representation parameters.
####################
experiment.initializer = SigmaEC.represent.BitStringInitializer
experiment.initializer.populationSize = 50
experiment.initializer.numBits = 20
experiment.initializer.random = %experiment.random

####################
# The CircleOfLife holds all the machinery needed for actual evolution.
####################
experiment.circleOfLife = SigmaEC.SimpleCircleOfLife
experiment.circleOfLife.random = %experiment.random
experiment.circleOfLife.numGenerations = 100

####################
# The objective function and genotype-to-phenotype mapping
####################
experiment.circleOfLife.objective = SigmaEC.evaluate.objective.RosenbrockObjective
experiment.circleOfLife.objective.numDimensions = 5
experiment.circleOfLife.decoder = SigmaEC.represent.BitStringToDoubleVectorDecoder
experiment.circleOfLife.decoder.numBitsPerDimension = 4
experiment.circleOfLife.decoder.lowestSignificance = 0
# Prefixing the name of another parameters with '%' retrieves its value
experiment.circleOfLife.decoder.numDimensions = %experiment.circleOfLife.objective.numDimensions

####################
# Parent selection gets applied before reproductive operators
####################
experiment.circleOfLife.parentSelector = SigmaEC.select.TournamentSelector
experiment.circleOfLife.parentSelector.tournamentSize = 2
# When '%' is used to on a class parameter, the same instance is reused.
# That is, parentSelector.decoder will point to the same instance of Decoder
# as circleOfLife.decoder, rather than constructing a new one.
experiment.circleOfLife.parentSelector.decoder = %experiment.circleOfLife.decoder
experiment.circleOfLife.parentSelector.objective = %experiment.circleOfLife.objective
experiment.circleOfLife.parentSelector.random = %experiment.random

####################
# "Pre" metrics are measurements taken in between parent selection and reproduction.
####################
#experiment.circleOfLife.preMetrics =

####################
# Reproductive operators
####################
# List reproductive operator types here, in the order they will be applied.
experiment.circleOfLife.generators = SigmaEC.operate.MatingGenerator,SigmaEC.operate.MutatingGenerator
# Parameters for individual elements of a list can be accessed by their index.
experiment.circleOfLife.generators.0.mator = SigmaEC.operate.NPointCrossoverMator
experiment.circleOfLife.generators.0.mator.numCutPoints = 2
experiment.circleOfLife.generators.0.mator.random = %experiment.random
experiment.circleOfLife.generators.1.mutator = SigmaEC.operate.BitGeneMutator
experiment.circleOfLife.generators.1.mutationRate = 0.05
experiment.circleOfLife.generators.1.random = %experiment.random

####################
# "Post" metrics are measurements taken in between reproduction and survival selection.
####################
experiment.circleOfLife.postMetrics = SigmaEC.measure.WriterPopulationMetric
experiment.circleOfLife.postMetrics.0.metric = SigmaEC.measure.FitnessStatisticsPopulationMetric
experiment.circleOfLife.postMetrics.0.metric.objective = %experiment.circleOfLife.objective
experiment.circleOfLife.postMetrics.0.metric.decoder = %experiment.circleOfLife.decoder

####################
# Survival selection gets applied after reproductive operators.  Typically you want parent selection or survival selection, but not both.
####################
# experiment.circleOfLife.survivalSelector = SigmaEC.select.TournamentSelector


