####################
# The experiment is the top-level controller for everything that happens.
####################
experiment =                                                    SigmaEC.experiment.SimpleExperiment
experiment.numRuns =                                            2
experiment.random =                                             SigmaEC.SRandom
# Optionally fix the random seed
#experiment.random.seed = 10000

cgpParameters =                                                 SigmaEC.represent.cgp.CGPParameters
cgpParameters.numInputs =                                       6
cgpParameters.numOutputs =                                      $(%cgpParameters.numInputs - 1)
cgpParameters.numLayers =                                       50
cgpParameters.numNodesPerLayer =                                1
cgpParameters.maxArity =                                        2
cgpParameters.levelsBack =                                      %cgpParameters.numLayers
cgpParameters.numPrimitives =                                   1
dimensions = $(%cgpParameters.numLayers * %cgpParameters.numNodesPerLayer * (%cgpParameters.maxArity + 1) + %cgpParameters.numOutputs)


####################
# The CircleOfLife holds all the machinery needed for actual evolution.
####################
experiment.circleOfLife =                                       SigmaEC.meta.SimpleCircleOfLife

####################
# Set up the initial population and representation parameters.
####################
experiment.circleOfLife.initializer =                           SigmaEC.represent.cgp.CGPIntVectorInitializer
experiment.circleOfLife.initializer.populationSize =            5
experiment.circleOfLife.initializer.random =                    %experiment.random
experiment.circleOfLife.initializer.cgpParameters =             %cgpParameters

experiment.circleOfLife.evaluator =                             SigmaEC.evaluate.EvaluationOperator
experiment.circleOfLife.evaluator.objective =                   %experiment.circleOfLife.objective
experiment.circleOfLife.evaluator.decoder =                     SigmaEC.represent.cgp.IntVectorToCartesianIndividualDecoder
experiment.circleOfLife.evaluator.decoder.cgpParameters =       %cgpParameters
experiment.circleOfLife.evaluator.decoder.primitives =          SigmaEC.evaluate.objective.function.NAND

experiment.circleOfLife.random =                                %experiment.random
experiment.circleOfLife.fitnessComparator =                     SigmaEC.select.ScalarFitnessComparator
experiment.circleOfLife.fitnessComparator.minimize =            false
experiment.circleOfLife.fitnessComparator.equalIsBetter =       true
experiment.circleOfLife.stoppingCondition =                     SigmaEC.meta.NumStepsStoppingCondition
experiment.circleOfLife.stoppingCondition.numSteps =            500
experiment.circleOfLife.stoppingCondition.progressBar =         true
experiment.circleOfLife.stoppingCondition.fitnessComparator =   %experiment.circleOfLife.fitnessComparator

####################
# The objective function
####################
experiment.circleOfLife.objective =                             SigmaEC.evaluate.transform.SwitchingObjective
experiment.circleOfLife.objective.interval =                    100
experiment.circleOfLife.objective.repeat =                      true
experiment.circleOfLife.objective.objectives =                            SigmaEC.evaluate.objective.function.TruthTableObjective,\
                                                                          SigmaEC.evaluate.objective.function.TruthTableObjective
experiment.circleOfLife.objective.objectives.0.targetFunction =           SigmaEC.evaluate.objective.function.XOR
experiment.circleOfLife.objective.objectives.1.targetFunction =           SigmaEC.evaluate.objective.function.FULL_ADDER

####################
# Operator pipeline
####################
# List reproductive operator types here, in the order they will be applied.
# An evaluation operator should come last, so that the children have their fitnesses assigned.
experiment.circleOfLife.operators =                             SigmaEC.select.SelectionOperator,\
                                                                SigmaEC.operate.MutatingOperator,\
                                                                %experiment.circleOfLife.evaluator
# Parameters for individual elements of a list can be accessed by their index.
experiment.circleOfLife.operators.0.survivorPopSize =              %experiment.circleOfLife.initializer.populationSize
experiment.circleOfLife.operators.0.selector =                  SigmaEC.select.TruncationSelector
experiment.circleOfLife.operators.0.selector.fitnessComparator = %experiment.circleOfLife.fitnessComparator
experiment.circleOfLife.operators.0.selector.random =           %experiment.random
experiment.circleOfLife.operators.1.overlapStyle =              PLUS
experiment.circleOfLife.operators.1.mutator =                   SigmaEC.represent.cgp.CGPIntGeneMutator
experiment.circleOfLife.operators.1.mutator.cgpParameters =     %cgpParameters
experiment.circleOfLife.operators.1.mutator.mutationRate =      SigmaEC.operate.ConstantMutationRate
experiment.circleOfLife.operators.1.mutator.mutationRate.rate = $(1/%dimensions)
experiment.circleOfLife.operators.1.mutator.random =            %experiment.random
# We add a "constraint" simply as a safeguard, to verify that the mutator does not produces invalid CGP individuals (it never should).
experiment.circleOfLife.operators.1.constraint =                SigmaEC.represent.cgp.CartesianIntVectorConstraint
experiment.circleOfLife.operators.1.constraint.cgpParameters =  %cgpParameters
experiment.circleOfLife.operators.1.maxAttempts =  1

####################
# Measurements 
####################
experiment.circleOfLife.metrics =                               SigmaEC.measure.WriterPopulationMetric
#,\
                                                                SigmaEC.measure.WriterPopulationMetric
#experiment.circleOfLife.metrics.0.file = results/fitnesses.csv
experiment.circleOfLife.metrics.0.modulo =                      25
experiment.circleOfLife.metrics.0.metric =                      SigmaEC.measure.FitnessStatisticsPopulationMetric
experiment.circleOfLife.metrics.0.metric.fitnessComparator =    %experiment.circleOfLife.fitnessComparator
#experiment.circleOfLife.metrics.1.file =                        results/phenotypes.csv
#experiment.circleOfLife.metrics.1.metric =                      SigmaEC.measure.FormattedPopulationMetric
#experiment.circleOfLife.metrics.1.metric.bestOnly =             true
#experiment.circleOfLife.metrics.1.metric.fitnessComparator =    %experiment.circleOfLife.fitnessComparator
#experiment.circleOfLife.metrics.1.metric.formatter =            SigmaEC.represent.format.IntVectorCSVFormatter
